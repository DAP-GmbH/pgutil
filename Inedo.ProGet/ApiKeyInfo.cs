using System.Text.Json.Serialization;

namespace Inedo.ProGet;

/// <summary>
/// Represents the JSON object returned from ProGet's Create ApiKey and List ApiKey HTTP endpoints
/// </summary>
/// <seealso cref="ProGetClient.CreateApiKeyAsync"/>
/// <seealso cref="ProGetClient.ListApiKeysAsync"/>
public sealed class ApiKeyInfo
{
    /// <summary>
    /// ProGet-generated unique ID for an API key and used for deletion
    /// </summary>
    /// <remarks>
    /// This is only generated by ProGet and can never be set
    /// </remarks>
    public int? Id { get; set; }
    /// <summary>
    /// The type of API key created or to create
    /// </summary>
    /// <remarks>
    /// * <see cref="ApiKeyType.Other"/> is used by pre-ProGet 6.0 keys and may not be used when creating a key
    /// * Required when creating keys
    /// </remarks>
    public ApiKeyType? Type { get; set; }
    /// <summary>
    /// API key text
    /// </summary>
    /// <remarks>
    /// - When creating keys, this will be generated by ProGet when not specified.
    /// - When cryptographic hashing is enabled in ProGet, this will always be null and may never be set on create
    /// </remarks>
    public string? Key { get; set; }
    /// <summary>
    /// Used in lists of keys, and when not specified, a name like "(ID=1000)" is displayed
    /// </summary>
    public string? DisplayName { get; set; }
    /// <summary>
    /// Used to describe the usage or other context about the key
    /// </summary>
    public string? Description { get; set; }
    /// <summary>
    /// APIs a system key may use
    /// </summary>
    /// <remarks>
    /// * Required when <see cref="Type"/> is <see cref="ApiKeyType.Feed"/>; otherwise must be null
    /// * Value is either ["full-control"] or a combination of "feeds", "sca", "sbom-upload"
    /// </remarks>
    public string[]? SystemApis { get; set; }
    /// <summary>
    /// Permissions a feed key may have
    /// </summary>
    /// <remarks>
    /// * Value is a combination of "view","add","promote","delete"
    /// * Required when <see cref="Type"/> is <see cref="ApiKeyType.Feed"/>; otherwise must be null
    /// </remarks>
    public string[]? PackagePermissions { get; set; }
    /// <summary>
    /// Name of the feed the key applies to
    /// </summary>
    /// <remarks>
    /// * Optional when <see cref="Type"/> is <see cref="ApiKeyType.Feed"/>; otherwise must be null
    /// * Must be null when <see cref="FeedGroup"/> has a value
    /// </remarks>
    public string? Feed { get; set; }
    /// <summary>
    /// Name of the feed group the key applies to
    /// </summary>
    /// <remarks>
    /// * Optional when <see cref="Type"/> is <see cref="ApiKeyType.Feed"/>; otherwise must be null
    /// * Must be null when <see cref="Feed"/> has a value
    /// </remarks>
    public string? FeedGroup { get; set; }
    /// <summary>
    /// Optional expiration date
    /// </summary>
    public DateTime? Expiration { get; set; }
    /// <summary>
    /// This will always have a value when listing, but when not specified in creating, default will be <see cref="ApiKeyBodyLogging.None"/>
    /// </summary>
    public ApiKeyBodyLogging? Logging { get; set; }
    /// <summary>
    /// Name of the user the personal key applies to
    /// </summary>
    /// <remarks>
    /// * Required when <see cref="Type"/> is <see cref="ApiKeyType.Personal"/>; otherwise must be null
    /// </remarks>/// 
    public string? User { get; set; }
}

[JsonConverter(typeof(JsonStringEnumConverter<ApiKeyType>))]
public enum ApiKeyType
{
    System,
    Feed,
    Personal,
    Other
}

[JsonConverter(typeof(JsonStringEnumConverter<ApiKeyBodyLogging>))]
public enum ApiKeyBodyLogging
{
    None,
    Request,
    Response,
    Both
}